{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","currentAccount","setCurrentAccount","_useState3","_useState4","allWaves","setAllWaves","_useState5","_useState6","userMessage","setUserMessage","contractAddress","contractABI","abi","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","ethereum","accounts","account","wrap","_context","prev","next","window","console","log","abrupt","request","method","sent","length","t0","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","alert","wave","_ref3","_callee3","_window3","provider","signer","wavePortalContract","waveTxn","_context3","ethers","providers","Web3Provider","getSigner","Contract","gasLimit","hash","wait","getAllWaves","error","useCallback","_callee4","_window4","waves","wavesCleaned","_context4","map","address","waver","timestamp","Date","message","useEffect","onNewWave","from","prevState","concat","_toConsumableArray","on","off","React","createElement","className","role","aria-label","type","placeholder","value","onChange","event","target","onClick","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6973be9.chunk.js","sourcesContent":["import React, { useEffect, useState ,useCallback } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport './App.css';\r\nimport abi from './utils/WavePortal.json';\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  const [userMessage, setUserMessage] = useState(\"\"); // Added this line for custom message \r\n  const contractAddress = \"0xf7d5700da3964a6ef1f7dbbe4c0a88d6ebd7b6e7\"; //important! 1 every time after re-deploying ur contract \r\n  // 2 every time after contract deployment make sure you copy paste the new abi file from the artifacts folder to the utils \r\n  const contractABI = abi.abi;\r\n  \r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have MetaMask installed!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the Ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        console.log(\"No authorized account found\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // const wave = async () => {\r\n  //   try {\r\n  //     const { ethereum } = window;\r\n      \r\n  //     if (ethereum) {\r\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\r\n  //       const signer = provider.getSigner();\r\n  //       const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n  //       let count = await wavePortalContract.getTotalWaves();\r\n  //       console.log(\"Retrieved total wave count...\", count.toNumber());\r\n  //       //const waveTxn = await wavePortalContract.wave();\r\n  //       const waveTxn = await wavePortalContract.wave(\"this is a message\"); //temp\r\n  //       console.log(\"Mining...\", waveTxn.hash);\r\n\r\n  //       await waveTxn.wait();\r\n  //       console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n  //       count = await wavePortalContract.getTotalWaves();\r\n  //       console.log(\"Retrieved total wave count...\", count.toNumber());\r\n  //     } else {\r\n  //       console.log(\"Ethereum object doesn't exist!\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // }\r\n  \r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n  \r\n      if (ethereum) {\r\n         // Connect to the Ethereum network using MetaMask provider\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        // Create a contract instance using the contract address and ABI\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n         // Send a wave transaction to the contract with the user's message and gas limit\r\n        const waveTxn = await wavePortalContract.wave(userMessage, { gasLimit: 300000 })\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n         // Wait for the transaction to be mined and confirmed on the blockchain\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n        // Clear the message input field\r\n        setUserMessage(\"\"); // clear the message input field\r\n        // Fetch and update all waves to reflect the new wave on the UI\r\n        getAllWaves(); // call to update UI with the new wave\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };  \r\n  \r\n\r\n  const getAllWaves = useCallback(async () => {\r\n    const { ethereum } = window;\r\n  \r\n    try {\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        const waves = await wavePortalContract.getAllWaves();\r\n  \r\n        const wavesCleaned = waves.map(wave => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          };\r\n        });\r\n  \r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [contractABI]);\r\n  \r\n  \r\n  useEffect(() => {\r\n    let wavePortalContract;\r\n  \r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log(\"NewWave\", from, timestamp, message);\r\n      setAllWaves(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n  \r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n  \r\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n  \r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, [contractABI]);\r\n  const handleInputChange = (event) => {\r\n    setUserMessage(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getAllWaves();\r\n  }, [getAllWaves]);\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\"><span role=\"img\" aria-label=\"Waving hand\">👋 Hey there!</span></div>\r\n        <div className=\"bio\">\r\n          I am Hristo and this is my first web3 project that's pretty cool right? Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your custom message here\"\r\n          value={userMessage}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => (\r\n          <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n            <div>Address: {wave.address}</div>\r\n            <div>Time: {wave.timestamp.toString()}</div>\r\n            <div>Message: {wave.message}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}